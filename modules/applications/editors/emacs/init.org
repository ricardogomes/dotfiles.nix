#+TITLE: Ricardo Gomes Emacs Literate Config
#+AUTHOR: Ricardo Gomes

* Keymaps

This section is not dynamic, so there might be some keymaps that are not present or some that are wrong, but I try to keep it up to date to serve as a cheatsheet.

| Keymap  | Function          | Package | Notes                                          |
|---------+-------------------+---------+------------------------------------------------|
| C-x C-f | counsel-find-file | counsel | Find file                                      |
| C-x C-s | save-buffer       | emacs   |                                                |
| C-x s   | save-some-buffers | emacs   | Promtps user for action on each unsaved buffer |
| C-x C-w | write-file        | emacs   | Save as                                        |
| C-c l   | org-store-link    | org     | Capture current possition                      |
| C-c C-l | org-insert-link   | org     | Insert captured link                           |

* Reset Emacs base UI

The first step is to reset the defaults from Emacs that don't make much sense to me. This includes removing the window chrome and startup messages.

#+BEGIN_SRC emacs-lisp :tangle init.el

  (setq inhibit-startup-message t )
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)

  (setq make-backup-files nil)
  (setq create-lockfiles nil)

#+END_SRC


** TODO Document the options defined

* Reset Base Keymaps

I want to reset the emacs base key maps in order to better understand the options available.

#+begin_src emacs-lisp :tangle init.el

  (global-unset-key (kbd "C-x i"))      ;; - emacs - Insert contents of _FILENAME_ into buffer
  (global-unset-key (kbd "C-x C-v"))    ;; - emacs - Replace buffer with _FILENAME_
  (global-unset-key (kbd "C-x C-q"))    ;; - emacs - Toggle Read Only
  
#+end_src

* Set up use-package

Next set is to setup the package repositories and import the use-package package

#+BEGIN_SRC emacs-lisp :tangle init.el

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

** TODO Document the package repositories choice

** TODO Document the setup of use-package in the emacs lifecycle
* Set up org-mode

Next I want to setup org-mode.

:CODE:
#+BEGIN_SRC emacs-lisp :tangle init.el

  (defun rg/org-mode-setup()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . rg/org-mode-setup)
    :config
    (setq org-ellipsis " ")

    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-span 14)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "DOING(i)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCEL(k@)")
            (sequence "MILESTONE(m)" "|" "DELIVERED(d)" "CANCELED(c@)")))

    (setq org-todo-keyword-faces
          '(("TODO" . org-warning)))

    (setq org-agenda-files
          '("/home/rg/Data/Knowledge/Org/Projects")))

  (global-set-key (kbd "C-c l") 'org-store-link)

  (use-package org-journal
    :after org
    :ensure t
    :defer t
    :init
    (setq org-journal-prefix-key "C-c j")
    :config
    (setq org-journal-date-prefix "#+TITLE: "
          org-journal-time-prefix "* "
          org-journal-date-format "%a, %Y-%m-%d"
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-dir "/home/rg/Data/Knowledge/Org/Journal/"))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))

#+END_SRC

** TODO Testing

** TODO Research how to make sure org-mode exists on initial bootstrap :research:

** TODO Improve Documentation :documentation:

* Set up UI baseline

These are UI changes, like fonts, themes and UI features (rainbow-delimiters).

#+BEGIN_SRC emacs-lisp :tangle init.el

  (set-face-attribute 'default nil :font "MonaspiceKr Nerd Font Propo" :height 240)
  (add-to-list 'default-frame-alist '(font . "MonaspiceKr Nerd Font Propo-16"))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :init (load-theme 'doom-dracula t ))


  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook		
                    eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** TODO Improve Documentation :research:

* Setup Packages

** NEXT Research ivy | counsel | swiper
:LOGBOOK:
- State "NEXT"       from "DOING"      [2024-02-06 ter 11:09]
- State "DOING"      from "NEXT"       [2024-02-06 ter 10:36]
:END:

Ivy seems to be a set of 3 packages, *ivy* itself is a completion mechanism, *counsel* is a collection of ivy-enhanced versions of emacs
commands, and swiper is ivy-enhanced alternative to Isearch (which at
this time I have no idea what it is).

The package that contains these tools seems to be the *counsel* package.



#+begin_src emacs-lisp :tangle init.el

  (use-package counsel)

  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")

  ;; Keybinds

  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  
  ;; Keybinds I'm still exploring

  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)

  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
  (global-set-key (kbd "C-c c") 'counsel-compile)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c L") 'counsel-git-log)
  (global-set-key (kbd "C-c k") 'counsel-rg)
  (global-set-key (kbd "C-c m") 'counsel-linux-app)
  (global-set-key (kbd "C-c n") 'counsel-fzf)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-c J") 'counsel-file-jump)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-c w") 'counsel-wmctrl)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-c b") 'counsel-bookmark)
  (global-set-key (kbd "C-c d") 'counsel-descbinds)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c o") 'counsel-outline)
  (global-set-key (kbd "C-c t") 'counsel-load-theme)
  (global-set-key (kbd "C-c F") 'counsel-org-file)

#+end_src

*** Additional Resources
- [[Ivy User Manual][https://oremacs.com/swiper/]]
- 

** TODO Research ivy-rich

** TODO Research counsel

** DOING Resarch which-key
:LOGBOOK:
- State "DOING"      from "NEXT"       [2024-02-06 ter 10:36]
:END:


This package implements a minor mode to display key bindings available after a inputed chord.

#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

** TODO Research general

** TODO Research helpful

** TODO Research projectile                                       :research:

** TODO Research dashboard                                        :research:




* Questions to find answers to
** How does counsel-find-file handle the directory for its search
